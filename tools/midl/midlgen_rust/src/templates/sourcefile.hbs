{{!
// Copyright 2023 MeshX Authors. All rights reserved.
// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
}}

// WARNING: This file is machine generated by midlgen.

#![allow(
    unused_parens, // one-element-tuple-case is not a tuple
    unused_mut, // not all args require mutation, but many do
    nonstandard_style, // auto-caps does its best, but is not always successful
)]

#![recursion_limit="512"]

#[allow(unused_imports)]
use fiber as fx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
    fidl::{
        fidl_bits,
        fidl_empty_struct,
        fidl_enum,
        fidl_struct_copy,
        fidl_struct,
        fidl_table,
        fidl_union,
        wrap_handle_metadata,
        encoding::{Encodable as _, Decodable as _, zerocopy},
        endpoints::{ControlHandle as _, Responder as _},
        client::{
            QueryResponseFut,
            decode_transaction_body_fut,
        },
    },
};

{{!
For FIDL tracing, the Rust bindings are assigned a bindings enum of 6. See
fidl-trace/trace_impl.cc, enum LogContext for more context.

This constant will be unused in a build that has FIDL tracing disabled,
since this constant is used only within trace_duration! macros that will
expand to no-ops. However, the constant needs to be present, since the
constant is evaluated before the macro expansion.

The constant starts with an underscore to avoid clashing with FIDL
declarations, which are not allowed to start with underscores.
}}
{{#if protocols}}
const _FIDL_TRACE_BINDINGS_RUST: u32 = 6;
{{/if}}

{{#each bits}}
{{> BitsDeclaration this }}
{{/each}}
{{#each consts}}
{{> ConstDeclaration this }}
{{/each}}
{{#each enums}}
{{> EnumDeclaration this }}
{{/each}}
{{#each results}}
{{> ResultDeclaration this }}
{{/each}}
{{#each unions}}
{{> UnionDeclaration this }}
{{/each}}
{{#each structs}}
{{> StructDeclaration this }}
{{/each}}
{{#each tables}}
{{> TableDeclaration this }}
{{/each}}
{{#each HandleMetadataWrappers}}
{{> HandleMetadataWrapperDeclaration this }}
{{/each}}

{{#each protocols}}
 
{{> ProtocolDeclaration this }}
 
{{!#each (call .ServicesForTransport "Channel") -}}
{{!> ServiceDeclaration this }}
{{!/each}}
{{/each}}