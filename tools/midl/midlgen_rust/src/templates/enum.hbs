{{!
// Copyright 2024 MeshX Authors. All rights reserved.
// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
}}

{{#each (doc_comments ir.maybe_attributes) }}
///{{ this }}
{{/each}}
#[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
{{#if ir.is_strict}}
#[repr({{ underlying_type }})]
{{/if}}
pub enum {{ name }} {
    {{#each members }}
    {{#each (doc_comments this.ir.maybe_attributes) }}
    ///{{ this }}
    {{/each }}
    {{ this.name }}{{#if @root.ir.is_strict}} = {{ this.value }}{{/if}},
    {{/each}}
    {{#if is_flexible }}
    #[doc(hidden)]
    __SourceBreaking { unknown_ordinal: {{ underlying_type }} },
    {{/if}}
}

{{#if is_flexible }}
/// Pattern that matches an unknown `{{name}}` member.
#[macro_export]
macro_rules! {{name}}Unknown {
    () => { _ };
}
{{/if}}

impl {{ name }} {
    #[inline]
    pub fn from_primitive(prim: {{ underlying_type }}) -> Option<Self> {
        match prim {
            {{#each members }}
            {{ this.value }} => Some(Self::{{ this.name }}),
            {{/each }}
            _ => None,
        }
    }
    {{#if ir.strict}}
    #[inline]
    pub const fn into_primitive(self) -> {{ underlying_type }} {
        self as {{ underlying_type }}
    }

    #[deprecated = "Strict enums should not use `is_unknown`"]
    #[inline]
    pub fn is_unknown(&self) -> bool {
        false
    }
    {{else}}
    #[inline]
    pub fn from_primitive_allow_unknown(prim: {{ underlying_type }}) -> Self {
        match prim {
            {{#each members }}
            {{ this.value }} => Self::{{ this.name }},
            {{/each}}
            unknown_ordinal => Self::__SourceBreaking { unknown_ordinal },
        }
    }

    #[inline]
    pub fn unknown() -> Self {
        Self::__SourceBreaking { unknown_ordinal: {{unknown_value_for_tmpl ir}} }
    }

    #[inline]
    pub const fn into_primitive(self) -> {{ underlying_type }} {
        match self {
            {{#each members }}
            Self::{{ this.name }} => {{ this.value }},
            {{/each}}
            Self::__SourceBreaking { unknown_ordinal } => unknown_ordinal,
        }
    }

    #[inline]
    pub fn is_unknown(&self) -> bool {
        match self {
            Self::__SourceBreaking { unknown_ordinal: _ } => true,
            {{#if members }}
            _ => false,
            {{/if}}
        }
    }
    {{/if}}
}