{{!
// Copyright 2024 The MeshX Authors. All rights reserved.
// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
}}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct {{ marker }};

impl midl::endpoints::ProtocolMarker for {{ marker }} {
    type Proxy = {{ proxy }};
    type RequestStream = {{ request_stream }};

    #[cfg(target_os = "fuchsia")]
    type SynchronousProxy = {{ synchronous_proxy }};

    const DEBUG_NAME: &'static str = "{{ debug_name }}";
}

{{#if discoverable}}
impl midl::endpoints::DiscoverableProtocolMarker for {{ marker }} {}
{{/if}}

{{#each methods }}
{{#if this.has_error}}
{{#unless this.is_composed}}
pub type {{ this.response.tuple_type }} = {{this.response.tuple_type_alias_rhs }};
{{/unless}}
{{/if}}
{{/each}}

pub trait {{ proxy_interface }}: Send + Sync {
    {{#each methods}}
    {{#if (and this.has_request this.has_response) }}
    type {{ this.response_fut }}: std::future::Future<Output = Result<{{ this.response.tuple_type }}, midl::Error>> + Send;
    {{/if}}

    {{#if this.has_request}}
    {{#if this.is_transitional}}
    #[allow(unused_variables)]
    {{/if}}
    fn r#{{ this.name }}(&self,
        {{#each this.request.parameters}}
        {{this.name}}: {{this.type}},
        {{/each}}
    )
    {{#if this.has_response }}
    -> Self::{{ this.response_fut }}
    {{else}}
    -> Result<(), midl::Error>
    {{/if }}
    {{#if this.is_transitional }}
    { unimplemented!("transitional method {{ this.name }} is unimplemented"); }
    {{else}}
    ; {{! Semicolon for no default implementation }}
    {{/if}}
    {{/if}}
    {{/each}}
}

#[derive(Debug)]
#[cfg(target_os = "fuchsia")]
pub struct {{ synchronous_proxy }} {
    client: midl::client::sync::Client,
}

#[cfg(target_os = "fuchsia")]
impl midl::endpoints::SynchronousProxy for {{synchronous_proxy}} {
    type Proxy = {{proxy}};
    type Protocol = {{marker}};

    fn from_channel(inner: midl::Channel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> midl::Channel {
        self.client.into_channel()
    }

    fn as_channel(&self) -> &midl::Channel {
        self.client.as_channel()
    }
}

#[cfg(target_os = "fuchsia")]
impl {{ synchronous_proxy }} {
    pub fn new(channel: midl::Channel) -> Self {
        let protocol_name = <{{ marker }} as midl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: midl::client::sync::Client::new(channel, protocol_name) }
    }

    pub fn into_channel(self) -> midl::Channel {
        self.client.into_channel()
    }

    /// Waits until an event arrives and returns it. It is safe for other
    /// threads to make concurrent requests while waiting for an event.
    pub fn wait_for_event(&self, deadline: fx::Time) -> Result<{{ event }}, midl::Error> {
        {{ event }}::decode(self.client.wait_for_event(deadline)?)
    }

    {{#each methods }}
    {{#if this.has_request }}
    {{#each this.doc_comments }}
    ///{{ this }}
    {{/each }}
    pub fn r#{{ this.name }}(
        &self,
        {{#each this.request.parameters }}
        mut {{ this.name }}: {{ this.type }},
        {{/each}}
        {{#if this.has_response }}
        ___deadline: fx::Time,
        {{/if}}
    ) -> Result<{{ or this.response.tuple_type "()" }}, midl::Error> {
        {{#if this.has_response }}
        let _response = self.client.send_query::<
            {{this.request.midl_type}},
            {{this.response.midl_type}},
        >(
            {{ this.request.encode_expr }},
            {{ this.ordinal }},
            {{ this.dynamic_flags }},
            ___deadline,
        )?
        {{#if this.is_flexible }}
        .into_result::<{{ @root.marker }}>("{{ this.name }}")?
        {{/if}};
        Ok({{ convert_to_tuple this.response "_response" }})
        {{else}}
        self.client.send::<{{this.request.midl_type}}>(
            {{ this.request.encode_expr }},
            {{ this.ordinal }},
            {{ this.dynamic_flags }},
        )
        {{/if}}
    }
    {{/if}}
    {{/each}}
}

#[derive(Debug, Clone)]
pub struct {{ proxy }} {
    client: midl::client::Client,
}

impl midl::endpoints::Proxy for {{ proxy }} {
    type Protocol = {{ marker }};

    fn from_channel(inner: midl::AsyncChannel) -> Self {
        Self::new(inner)
    }

    fn into_channel(self) -> Result<::midl::AsyncChannel, Self> {
        self.client.into_channel().map_err(|client| Self { client })
    }

    fn as_channel(&self) -> &::midl::AsyncChannel {
        self.client.as_channel()
    }
}

impl {{ proxy }} {
    /// Create a new Proxy for {{ ECI }}.
    pub fn new(channel: midl::AsyncChannel) -> Self {
        let protocol_name = <{{ marker }} as midl::endpoints::ProtocolMarker>::DEBUG_NAME;
        Self { client: midl::client::Client::new(channel, protocol_name) }
    }

    /// Get a Stream of events from the remote end of the protocol.
    ///
    /// # Panics
    ///
    /// Panics if the event stream was already taken.
    pub fn take_event_stream(&self) -> {{ event_stream }} {
        {{ event_stream }} {
            event_receiver: self.client.take_event_receiver(),
        }
    }

    {{#each methods}}
    {{#if this.has_request }}
    {{#each this.doc_comments }}
    ///{{ this }}
    {{/each}}
    pub fn r#{{ this.name }}(
        &self,
        {{#each this.request.parameters }}
        mut {{ this.name }}: {{ this.type }},
        {{/each}}
    )
    {{#if this.has_response}}
    -> midl::client::QueryResponseFut<{{this.response.tuple_type}}> {
    {{else}}
    -> Result<(), midl::Error> {
    {{/if}}
        {{ @root.proxy_interface }}::r#{{this.name}}(self,
            {{#each this.request.parameters }}
            {{ this.name }},
            {{/each }}
        )
    }
    {{/if}}
    {{/each}}
}

impl {{ proxy_interface }} for {{ proxy }} {
    {{#each methods }}
    {{#if this.has_request }}
    {{#if this.has_response }}
    type {{ this.response_fut }} = midl::client::QueryResponseFut<{{ this.response.tuple_type }}>;
    fn r#{{ this.name }}(
        &self,
        {{#each this.request.parameters }}
        mut {{ this.name }}: {{ this.type }},
        {{/each}}
    ) -> Self::{{ this.response_fut }} {
        fn _decode(mut _buf: Result<midl::MessageBufEtc, midl::Error>) -> Result<{{ this.response.tuple_type }}, midl::Error> {
            let _response = midl::client::decode_transaction_body::<{{ this.response.midl_type }}, {{ this.ordinal }}>(_buf?)?
            {{#if this.is_flexible }}
            .into_result::<{{ @root.marker }}>("{{ this.name }}")?
            {{/if}};
            Ok({{ convert_to_tuple this.response "_response" }})
        }
        self.client.send_query_and_decode::<
            {{ this.request.midl_type }},
            {{ this.response.tuple_type }},
        >(
            {{ this.request.encode_expr }},
            {{ this.ordinal }},
            {{ this.dynamic_flags }},
            _decode,
        )
    }
    {{else}}
    fn r#{{this.name}}(
        &self,
        {{#each this.request.parameters}}
        mut {{this.name}}: {{this.type}},
        {{/each}}
    ) -> Result<(), midl::Error> {
        self.client.send::<{{ this.request.midl_type }}>(
            {{this.request.encode_expr}},
            {{this.ordinal}},
            {{this.dynamic_flags}},
        )
    }
    {{/if}}
    {{/if}}
    {{/each}}
}

pub struct {{ event_stream }} {
    event_receiver: midl::client::EventReceiver,
}

impl std::marker::Unpin for {{ event_stream }} {}

impl futures::stream::FusedStream for {{ event_stream }} {
    fn is_terminated(&self) -> bool {
        self.event_receiver.is_terminated()
    }
}

impl futures::Stream for {{ event_stream }} {
    type Item = Result<{{ event }}, midl::Error>;

    fn poll_next(mut self: std::pin::Pin<&mut Self>, cx: &mut std::task::Context<'_>)
        -> std::task::Poll<Option<Self::Item>>
    {
        match futures::ready!(
            futures::stream::StreamExt::poll_next_unpin(&mut self.event_receiver, cx)?
        ) {
            Some(buf) => std::task::Poll::Ready(Some({{ event }}::decode(buf))),
            None => std::task::Poll::Ready(None),
        }
    }
}

#[derive(Debug)]
pub enum {{ event }} {
    {{#each methods }}
    {{#unless this.has_request }}
    {{ this.camel_name }} {
        {{#each this.response.parameters }}
        {{ this.name }}: {{this.owned_type}},
        {{/each}}
    },
    {{/unless}}
    {{/each}}

    {{#if one_way_unknown_interactions }}
    #[non_exhaustive]
    _UnknownEvent {
        /// Ordinal of the event that was sent.
        ordinal: u64,
    },
    {{/if}}
}


impl {{event}} {
    {{#each methods }}
    {{#unless this.has_request }}
    #[allow(irrefutable_let_patterns)]
    pub fn into_{{ this.name }}(self) -> Option<{{ this.response.tuple_type }}> {
        if let {{ @root.event }}::{{ this.camel_name }} {
            {{#each this.response.parameters }}
            {{ this.name }},
            {{/each}}
        } = self {
            Some((
                {{#each this.response.parameters }}
                {{#if @index }}, {{/if}}{{this.name}}
                {{/each}}
            ))
        } else {
            None
        }
    }
    {{/unless}}
    {{/each}}

    /// Decodes a message buffer as a [`{{ event }}`].
    fn decode(mut buf: midl::MessageBufEtc) -> Result<{{ event }}, midl::Error> {
        let (bytes, _handles) = buf.split_mut();
        let (tx_header, _body_bytes) = midl::encoding::decode_transaction_header(bytes)?;
        debug_assert_eq!(tx_header.tx_id, 0);
        match tx_header.ordinal {
            {{#each methods }}
            {{#unless has_request }}
            {{ this.ordinal }} => {
                let mut out = midl::new_empty!({{ this.response.midl_type }});
                midl::encoding::Decoder::decode_into::<{{ this.response.midl_type }}>(&tx_header, _body_bytes, _handles, &mut out)?;
                Ok((
                    {{ @root.event }}::{{ this.camel_name }} {
                        {{ convert_to_fields this.response "out" }}
                    }
                ))
            }
            {{/unless}}
            {{/each}}
            {{#if one_way_unknown_interactions }}
            _ if tx_header.dynamic_flags().contains(midl::encoding::DynamicFlags::FLEXIBLE) => {
                Ok({{ event }}::_UnknownEvent {
                    ordinal: tx_header.ordinal,
                })
            }
            {{/if}}
            _ => Err(midl::Error::UnknownOrdinal {
                ordinal: tx_header.ordinal,
                protocol_name: <{{ marker }} as midl::endpoints::ProtocolMarker>::DEBUG_NAME,
            })
        }
    }
}

/// A Stream of incoming requests for {{ ECI }}.
pub struct {{ request_stream }} {
    inner: std::sync::Arc<midl::ServeInner>,
    is_terminated: bool,
}

impl std::marker::Unpin for {{ request_stream }} {}

impl futures::stream::FusedStream for {{ request_stream }} {
    fn is_terminated(&self) -> bool {
        self.is_terminated
    }
}

impl midl::endpoints::RequestStream for {{ request_stream }} {
    type Protocol = {{ marker }};
    type ControlHandle = {{ control_handle }};

    fn from_channel(channel: midl::AsyncChannel) -> Self {
        Self {
            inner: std::sync::Arc::new(midl::ServeInner::new(channel)),
            is_terminated: false,
        }
    }

    fn control_handle(&self) -> Self::ControlHandle {
        {{ control_handle }} { inner: self.inner.clone() }
    }

    fn into_inner(self) -> (::std::sync::Arc<midl::ServeInner>, bool) {
        (self.inner, self.is_terminated)
    }

    fn from_inner(inner: std::sync::Arc<midl::ServeInner>, is_terminated: bool) -> Self {
        Self { inner, is_terminated }
    }
}

impl futures::Stream for {{ request_stream }} {
    type Item = Result<{{ request }}, midl::Error>;

    fn poll_next(mut self: std::pin::Pin<&mut Self>, cx: &mut std::task::Context<'_>)
        -> std::task::Poll<Option<Self::Item>>
    {
        let this = &mut *self;
        if this.inner.check_shutdown(cx) {
            this.is_terminated = true;
            return std::task::Poll::Ready(None);
        }
        if this.is_terminated {
            panic!("polled {{ request_stream }} after completion");
        }
        midl::encoding::with_tls_decode_buf(|bytes, handles| {
            match this.inner.channel().read_etc(cx, bytes, handles) {
                std::task::Poll::Ready(Ok(())) => {},
                std::task::Poll::Pending => return std::task::Poll::Pending,
                std::task::Poll::Ready(Err(fx_status::Status::PEER_CLOSED)) => {
                    this.is_terminated = true;
                    return std::task::Poll::Ready(None);
                }
                std::task::Poll::Ready(Err(e)) => return std::task::Poll::Ready(Some(Err(midl::Error::ServerRequestRead(e)))),
            }

            // A message has been received from the channel
            let (header, _body_bytes) = midl::encoding::decode_transaction_header(bytes)?;

            std::task::Poll::Ready(Some(match header.ordinal {
                {{#each methods}}
                {{#if this.has_request}}
                {{this.ordinal}} => {
                    header.validate_request_tx_id(
                    {{#if this.has_response}}
                        midl::MethodType::TwoWay
                    {{else}}
                        midl::MethodType::OneWay
                    {{/if}}
                    )?;
                    let mut req = midl::new_empty!({{this.request.midl_type}});
                    midl::encoding::Decoder::decode_into::<{{this.request.midl_type}}>(&header, _body_bytes, handles, &mut req)?;
                    let control_handle = {{@root.control_handle}} {
                        inner: this.inner.clone(),
                    };
                    Ok({{@root.request}}::{{this.camel_name}} {
                        {{ convert_to_fields "req" }}
                        {{#if this.has_response}}
                        responder: {{this.responder}} {
                            control_handle: std::mem::ManuallyDrop::new(control_handle),
                            tx_id: header.tx_id,
                        },
                        {{else}}
                        control_handle,
                        {{/if}}
                    })
                }
                {{/if}}
                {{/each}}
                {{#if one_way_unknown_interactions }}
                _ if header.tx_id == 0 && header.dynamic_flags().contains(midl::encoding::DynamicFlags::FLEXIBLE) => {
                    Ok({{ request }}::_UnknownMethod {
                        ordinal: header.ordinal,
                        control_handle: {{ control_handle }} { inner: this.inner.clone() },
                        {{#if two_way_unknown_interactions }}
                        method_type: midl::MethodType::OneWay,
                        {{/if}}
                    })
                }
                {{#if two_way_unknown_interactions }}
                _ if header.dynamic_flags().contains(midl::encoding::DynamicFlags::FLEXIBLE) => {
                    this.inner.send_framework_err(
                        midl::encoding::FrameworkErr::UnknownMethod,
                        header.tx_id,
                        header.ordinal,
                        header.dynamic_flags(),
                        (bytes, handles),
                    )?;
                    Ok({{ request }}::_UnknownMethod {
                        ordinal: header.ordinal,
                        control_handle: {{ control_handle }} { inner: this.inner.clone() },
                        method_type: midl::MethodType::TwoWay,
                    })
                }
                {{/if}}
                {{/if}}
                _ => Err(midl::Error::UnknownOrdinal {
                    ordinal: header.ordinal,
                    protocol_name: <{{ marker }} as midl::endpoints::ProtocolMarker>::DEBUG_NAME,
                }),
            }))
        })
    }
}

{{#each doc_comments}}
///{{this}}
{{/each}}
#[derive(Debug)]
pub enum {{ request }} {
    {{#each methods }}
    {{#if this.has_request }}
    {{#each this.doc_comments}}
    ///{{this}}
    {{/each}}
    {{ this.camel_name }} {
        {{#each this.request.parameters }}
        {{this.name}}: {{this.owned_type}},
        {{/each}}
        {{#if has_response }}
        responder: {{ responder }},
        {{else}}
        control_handle: {{ control_handle }},
        {{/if}}
    },
    {{/if}}
    {{/each}}

    {{#if one_way_unknown_interactions}}
    /// An interaction was received which does not match any known method.
    #[non_exhaustive]
    _UnknownMethod {
        /// Ordinal of the method that was called.
        ordinal: u64,
        control_handle: {{ control_handle }},
        {{#if two_way_unknown_interactions }}
        method_type: midl::MethodType,
        {{/if}}
    },
    {{/if}}
}

impl {{request}} {
    {{#each methods}}
    {{#if this.has_request}}
    #[allow(irrefutable_let_patterns)]
    pub fn into_{{this.name}}(self) -> Option<(
        {{#each this.request.parameters }}
        {{this.owned_type}},
        {{/each}}
        {{#if this.has_response}}
        {{this.responder}}
        {{else}}
        {{@root.control_handle}}
        {{/if}}
    )> {
        if let {{request}}::{{this.camel_name}} {
            {{#each this.request.parameters }}
            {{this.name}},
            {{/each}}
            {{#if this.has_response }}
            responder,
            {{else}}
            control_handle,
            {{/if}}
        } = self {
            Some((
                {{#each this.request.parameters}}
                {{this.name}},
                {{/each}}
                {{#if this.has_response}}
                responder
                {{else}}
                control_handle
                {{/if}}
            ))
        } else {
            None
        }
    }
    {{/if}}
    {{/each}}

    /// Name of the method defined in MIDL
    pub fn method_name(&self) -> &'static str {
        match *self {
            {{#each methods}}
            {{#if this.has_request }}
            {{@root.request}}::{{ this.camel_name }}{..} => "{{ this.name }}",
            {{/if}}
            {{/each}}

            {{#if @root.two_way_unknown_interactions }}
            {{ @root.request }}::_UnknownMethod {
                method_type: midl::MethodType::OneWay, ..
            } => "unknown one-way method",
            {{ @root.request }}::_UnknownMethod {
                method_type: midl::MethodType::TwoWay, ..
            } => "unknown two-way method",
            {{else if @root.one_way_unknown_interactions }}
            {{request}}::_UnknownMethod {..} => "unknown one-way method",
            {{/if}}
        }
    }
}

#[derive(Debug, Clone)]
pub struct {{ control_handle }} {
    inner: std::sync::Arc<midl::ServeInner>,
}

impl midl::endpoints::ControlHandle for {{ control_handle }} {
    fn shutdown(&self) {
        self.inner.shutdown()
    }

    fn shutdown_with_epitaph(&self, status: fx_status::Status) {
        self.inner.shutdown_with_epitaph(status)
    }

    fn is_closed(&self) -> bool {
        self.inner.channel().is_closed()
    }

    fn on_closed<'a>(&'a self) -> midl::OnSignals<'a> {
        self.inner.channel().on_closed()
    }
}

impl {{ control_handle }} {
    {{#each methods }}
    {{#unless this.has_request }}
    pub fn send_{{ this.name }}(&self,
        {{#each this.response.parameters }}
        mut {{this.name}}: {{this.type}},
        {{/each}}
    ) -> Result<(), midl::Error> {
        self.inner.send::<{{ this.response.midl_type }}>(
            {{ this.response.encode_expr }},
            0,
            {{ this.ordinal }},
            {{ this.dynamic_flags }}
        )
    }
    {{/unless}}
    {{/each}}
}

{{#each methods}}
{{#if (and this.has_request this.has_response) }}
#[must_use = "MIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct {{ $method.Responder }} {
    control_handle: std::mem::ManuallyDrop<{{ $protocol.ControlHandle }}>,
    tx_id: u32,
}

/// Set the the channel to be shutdown (see [`{{ control_handle }}::shutdown`])
/// if the responder is dropped without sending a response, so that the client
/// doesn't hang. To prevent this behavior, call `drop_without_shutdown`.
impl std::ops::Drop for {{ responder }} {
    fn drop(&mut self) {
        self.control_handle.shutdown();
        // Safety: drops once, never accessed again
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
    }
}

impl midl::endpoints::Responder for {{ responder }} {
    type ControlHandle = {{ control_handle }};

    fn control_handle(&self) -> &{{ control_handle }} {
        &self.control_handle
    }

    fn drop_without_shutdown(mut self) {
        // Safety: drops once, never accessed again due to mem::forget
        unsafe { std::mem::ManuallyDrop::drop(&mut self.control_handle) };
        // Prevent Drop from running (which would shut down the channel)
        std::mem::forget(self);
    }
}

impl {{ responder }} {
    /// Sends a response to the MIDL transaction.
    ///
    /// Sets the channel to shutdown if an error occurs.
    pub fn send(self,
        {{#each this.response.parameters}}
        mut {{this.name}}: {{this.type}},
        {{/each}}
    ) -> Result<(), midl::Error> {
        let _result = self.send_raw(
            {{#each this.response.parameters }}
            {{this.name}},
            {{/each}}
        );
        if _result.is_err() {
            self.control_handle.shutdown();
        }
        self.drop_without_shutdown();
        _result
    }

    /// Similar to "send" but does not shutdown the channel if an error occurs.
    pub fn send_no_shutdown_on_err(self,
        {{#each this.response.parameters}}
        mut {{this.name}}: {{this.type}},
        {{/each}}
    ) -> Result<(), midl::Error> {
        let _result = self.send_raw(
            {{#each this.response.parameters }}
            {{this.name}},
            {{/each}}
        );
        self.drop_without_shutdown();
        _result
    }

    fn send_raw(
        &self,
        {{#each this.response.parameters }}
        mut {{this.name}}: {{this.type}},
        {{/each}}
    ) -> Result<(), midl::Error> {
        self.control_handle.inner.send::<{{ this.response.midl_type }}>(
            {{ this.response.encode_expr }},
            self.tx_id,
            {{ this.ordinal }},
            {{ this.dynamic_flags }}
        )
    }
}
{{/if}}
{{/each}}
