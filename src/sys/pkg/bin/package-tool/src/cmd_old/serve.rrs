use std::ffi::OsString;
use std::net::SocketAddr;
use std::path::Path;
use std::sync::{Arc, Mutex};

use futures_util::future;
//use http::response::Builder as ResponseBuilder;
//use hyper::body::Body;
//use hyper::service::{make_service_fn, service_fn};
//use hyper::{header, StatusCode};
//use hyper_staticfile::Static;
use std::fmt::Write;
use std::io::Error as IoError;

use crate::cmd::models::PackageMetadata;

const COMPONENT_ROOT: &str = r#"
<meta charset="UTF-8">
<meta name="description" content="My Component">
<meta name="keywords" content="HTML, JavaScript">
<meta name="author" content="John Doe">
"#;

struct UIComponentHost {
    source_name: OsString,
    source_content: String,
}

/*async fn handle_package_request<B>(
    req: hyper::Request<B>,
    static_: Static,
    components: Arc<Mutex<Vec<UIComponentHost>>>,
) -> Result<hyper::Response<Body>, IoError> {
    let res = {
        let lock = components.lock().unwrap();
        let component = lock.get(0).unwrap();

        let mut root = String::from(COMPONENT_ROOT);
        write!(
            &mut root,
            "<script src=\"/{}\" defer></script>\n",
            component.source_name.to_str().unwrap()
        )
        .unwrap();

        if req.uri().path() == "/" {
            let res = ResponseBuilder::new()
                .status(StatusCode::OK)
                .header(header::CONTENT_TYPE, "text/html")
                .body(Body::from(root))
                .expect("unable to build response");

            Some(res)
        } else if req.uri().path() == format!("/{}", component.source_name.to_str().unwrap()) {
            let res = ResponseBuilder::new()
                .status(StatusCode::OK)
                .header(header::ACCEPT, "text/javascript")
                .body(Body::from(component.source_content.clone()))
                .expect("unable to build response");

            Some(res)
        } else {
            None
        }
    };

    if res.is_none() {
        static_.clone().serve(req).await
    } else {
        Ok(res.unwrap())
    }
}*/

pub async fn start_dev_server(input_dir: &str, addr_str: &str) {
    let addr: SocketAddr = addr_str.parse().unwrap();
    // let static_ = Static::new("./");

    let input_dir = Path::new(input_dir);
    let manifest_path = input_dir.join("meta.yml");

    let manifest = {
        let s = std::fs::read_to_string(manifest_path.clone()).unwrap();
        serde_yaml::from_str::<PackageMetadata>(s.as_str()).unwrap()
    };

    let mut ui_components: Vec<UIComponentHost> = vec![];

    manifest.manifests.iter().for_each(|manifest| {
        let full_path = input_dir.join(manifest);
        let resource_file_content = std::fs::read_to_string(full_path).unwrap();
        let value = serde_yaml::from_str::<serde_yaml::Value>(resource_file_content.as_str()).unwrap();

        let res_obj = value.as_mapping().unwrap();
        let type_key = serde_yaml::Value::String("type".to_owned());
        let entry_key = serde_yaml::Value::String("entry".to_owned());
        let props_key = serde_yaml::Value::String("properties".to_owned());

        let res_type = res_obj.get(&type_key).expect("we expect the resource to have a type");

        if res_type.as_str().unwrap() == "app.meshx.co/viewComponent" {
            let res_props = res_obj
                .get(&props_key)
                .expect("we expect the resource to have a properties object");

            let entry = res_props
                .as_mapping()
                .unwrap()
                .get(&entry_key)
                .expect("we expect the resource have an entry property");
            let entry = entry.as_str().unwrap();

            let full_path = input_dir.join(entry);
            let filename = full_path.file_name().unwrap().to_owned();
            let source_content = std::fs::read_to_string(full_path).unwrap();

            ui_components.push(UIComponentHost {
                source_name: filename,
                source_content,
            });
        } else {
            println!("not supported resource");
        }
    });

    let context = Arc::new(Mutex::new(ui_components));

    let make_service = make_service_fn(|_| {
        let static_ = static_.clone();
        let context = context.clone();

        future::ok::<_, hyper::Error>(service_fn(move |req| {
            handle_package_request(req, static_.clone(), context.clone())
        }))
    });

    let server = Server::bind(&addr).serve(make_service);

    println!("Run dev package ({}) on http://{}", manifest.name, addr);

    server.await.unwrap();
}
