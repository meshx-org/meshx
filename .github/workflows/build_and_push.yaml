name: Build and Push MeshX binary

on:
    workflow_dispatch:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

concurrency:
    # Allow only one workflow per any non-`main` branch.
    group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.ref_name == 'main' && github.sha || 'anysha' }}
    cancel-in-progress: true

env:
    CARGO_TERM_COLOR: always
    RUST_BACKTRACE: 1
    COPT: "-Werror"
    SCCACHE_GHA_ENABLED: "true"
    RUSTC_WRAPPER: "sccache"

jobs:
    build_and_test:
        name: Build and test
        runs-on: ubuntu-20.04
        #strategy:
        #    matrix:
        #        toolchain:
        #            - stable
        #            - beta
        #            - nightly
        steps:
            # this caches (some) dependencies
            - name: Run sccache-cache
              uses: mozilla-actions/sccache-action@v0.0.3

            - uses: actions/checkout@v4

            - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}

            - run: cargo build --verbose --locked --release --bin meshx

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Login to DockerHub
              uses: docker/login-action@v3
              with:
                  username: ${{ vars.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
              with:
                  images: meshxorg/meshx
                  tags: |
                      type=edge
                      type=sha

            - name: Build and push
              id: docker_build
              uses: docker/build-push-action@v3
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
